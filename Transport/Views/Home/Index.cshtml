@model Transport.Models.GroupHomeViewModel

@{
    ViewBag.Title = "Home";
    ViewBag.AppName = "Transport Log";
}

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="demo-container">
    <div id="scheduler"></div>

</div>


<script>

    var scheduler;

    var dropdownsData = {};
    var loadsData = [];
    var docksData = [];

    var a1 = getLoadsData();
    var a2 = getDocksData();
    var a3 = getDropdownsData();
    
    var deleted = [
        {
            value: false,
            text: "False"
        },
        {
            value: true,
            text: "True"
        }
    ];
    
    $(document).ready(function () {
        $.when(a1,a2,a3).done(function () {
            startScheduler();
            console.log("loadsData");
            console.log(loadsData);
        });
    });
    
    function getSchedulerInstance() {
        console.log("startSchedulerInstance")

        return scheduler.dxScheduler("instance");
    }

    function getLoadsData() {
        console.log("getLoadsData")

        return $.ajax({
            url: "/Home/GetLoads",
            type: "GET",
            contentType: "application/json;charset=utf-8",
            dataType: "json",
            data: '',
            success: function (data, status, xhr) {
                data = JSON.parse(data);
                loadsData = data;
            },
            error: function (jqXhr, textStatus, errorMessage) {
                alert(errorMessage + "Error");
            }
        });
    }

    function getDocksData() {
        console.log("getDocksData")

        return $.ajax({
            url: "/Home/GetDocks",
            type: "GET",
            contentType: "application/json;charset=utf-8",
            dataType: "json",
            data: '',
            success: function (data, status, xhr) {
                docksData = data;
            },
            error: function (jqXhr, textStatus, errorMessage) {
                alert(errorMessage + "Error");
            }
        });
    }

    function getDropdownsData() {
        console.log("getDropdownsData")

        return $.ajax({
            url: "/Home/GetDropdowns",
            type: "GET",
            contentType: "application/json;charset=utf-8",
            dataType: "json",
            data: '',
            success: function (data, status, xhr) {
                dropdownsData = data;
            },
            error: function (jqXhr, textStatus, errorMessage) {
                alert(errorMessage+"Error");
            }
        });
    }
    
    function startScheduler() {
        console.log("StartScheduler");
        console.log("loadsData");
        console.log(loadsData);
        console.log("docksData");
        console.log(docksData);
        console.log("dropdownsData.Statuses");
        console.log(dropdownsData.Statuses);
        console.log("dropdownsData.LoadTypes");
        console.log(dropdownsData.LoadTypes);
        console.log("dropdownsData.Customers");
        console.log(dropdownsData.Customers);


        scheduler = $("#scheduler").dxScheduler({
            dataSource: loadsData,
            fieldExpr: "LoadNumber",
            startDateExpr: "PlannedTime",
            endDateExpr: "EndDate",
            views: [{
                type: "day",
                name: "Day",
                groupOrientation: "horizontal",
                cellDuration: 60
            }],
            currentView: "day",
            currentDate: new Date(2018, 4, 12),
            startDayHour: 0,
            allowMultiple: true,
            endDayHour: 24,
            showAllDayPanel: false,
            crossScrollingEnabled: false,
            showCurrentTimeIndicator: true,
            recurrenceEditMode: 'occurrence',
            width: "100%",
            editing: {
                allowAdding: true
            },
            groups: ["IDDocks"],
            resources: [
                {
                    fieldExpr: "IDStatus",
                    dataSource: dropdownsData.Statuses,
                    valueExpr: "Id",
                    colorExpr: "Color",
                    useColorAsDefault: true
                },{
                    dataSource: docksData,
                    fieldExpr: "IDDocks",
                    valueExpr: "Id",
                    displayExpr: "Text",
                    label: "Docks"
                }],
           
            appointmentTemplate: function (data) {

                if (data.Deleted == true) {
                    return null;
                } else {
                    if (data.LoadNumber == null)
                        data.LoadNumber = "";

                    if (data.ArivalTime == null) {
                        data.IDStatus = 1;
                    }
                    else if (data.DepartureTime != null) {
                        data.IDStatus = 3;
                    }
                    else if (data.ArivalTime != null || data.DockOn != null || data.DockOff != null) {
                        data.IDStatus = 2;
                    }

                    var status = "";
                        
                    var condition = dropdownsData.Statuses[data.IDStatus - 1];
                    if (condition.Id = data.IDStatus) {
                        status = condition.Text
                        }
                        

                    var customer = getCustomerById(data.IDCustomers);

                    return $("<div class='showtime-preview no-wrap'>" +
                        "<div class='status-text'>" + status + "</div><div class='hr'><hr></div>" +
                        "<div style='margin-bottom: 5px;'><strong>" +
                        "<div><strong>Load Number:</strong>&nbsp;" + data.LoadNumber + "</div>" +
                        "<div><strong>Customer:</strong>&nbsp;" + customer.Text + "</strong></div>" +
                        "</div>" +
                        "</div>");
                }
            }
            ,
            onAppointmentAdding: function (e) {
                    
                $.ajax({
                    url: '/Home/Create',
                    type: 'POST',
                    data: JSON.stringify(e.appointmentData),
                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    success: function (data) {
                        if (data.Response == "OK") {
                            toastr.success("Created", e.appointmentData.text, "info");
                        }
                        else
                            toastr.error("Error: " + data.Result.JobId);
                    },
                    error: function (jqXHR, exception) {
                        toastr.error("Error while saving");
                    }
                });
            },
            onAppointmentUpdating: function (e) {
                var load;
                var offset;
                    
                $.ajax({
                    url: '/Home/Edit',
                    type: 'POST',
                    data: JSON.stringify(e.newData),
                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    success: function (data) {
                        if (data.Response == "OK") {
                            toastr.success("Updated", e.appointmentData, "info");
                        }
                        else
                            toastr.error("Error: " + data.Result.JobId);
                    },
                    error: function (jqXHR, exception) {
                        toastr.error("Error while saving");
                    }
                });

            },
            onAppointmentFormCreated: function (data) {

                startDateTemp = data.appointmentData.PlannedTime;

                var form = data.form,
                    load = getLoadById(data.appointmentData.LoadNumber) || {};
                startDate = data.appointmentData.PlannedTime;

                console.log(load);

                form.option("items", [{
                    label: {
                        text: "Load Number"
                    },
                    editorType: "dxTextBox",
                    dataField: "LoadNumber",
                    editorOptions: {
                        value: load.LoadNumber,
                        readOnly: true
                    }
                }
                    ,
                {
                    label: {
                        text: "Status"
                    },
                    editorType: "dxSelectBox",
                    dataField: "IDStatus",
                    editorOptions: {
                        items: dropdownsData.Statuses,
                        displayExpr: "Text",
                        valueExpr: "Id",
                        onValueChanged: function (args) {
                        }
                    }
                }
                    ,
                {
                    label: {
                        text: "Customer"
                    },
                    editorType: "dxSelectBox",
                    dataField: "IDCustomers",
                    editorOptions: {
                        items: dropdownsData.Customers,
                        displayExpr: "Text",
                        valueExpr: "Id",
                        onValueChanged: function (args) {
                        }
                    }
                }
                    ,
                {
                    label: {
                        text: "Dock"
                    },
                    editorType: "dxSelectBox",
                    dataField: "IDDocks",
                    editorOptions: {
                        items: docksData,
                        displayExpr: "Text",
                        valueExpr: "Id",
                        onValueChanged: function (args) {
                        }
                    }
                }
                    ,
                {
                    label: {
                        text: "No Pallets"
                    },
                    dataField: "NumberOfPallets",
                    editorType: "dxTextBox",
                    editorOptions: {
                        value: load.NumberOfPallets,
                        displayExpr: "Text",
                        valueExpr: "Id",
                    }
                }
                    ,
                    {
                        label: {
                            text: "Load Type"
                        },
                        editorType: "dxSelectBox",
                        dataField: "IDLoadType",
                        editorOptions: {
                            items: dropdownsData.LoadTypes,
                            displayExpr: "Text",
                            valueExpr: "Id",
                            onValueChanged: function (args) {
                            }
                        }
                    }
                    ,
                {
                    label: {
                        text: "Planned Time"
                    },
                    name: "PlannedTime",
                    dataField: "PlannedTime",
                    editorType: "dxDateBox",
                    editorOptions: {
                        value: load.PlannedTime,
                        format:"shortDateShortTime",
                        width: "100%",
                        type: "datetime",
                        readOnly: false
                    }
                }
                    ,
                {
                    label: {
                        text: "Arrival Time"
                    },
                    name: "ArivalTime",
                    dataField: "ArivalTime",
                    editorType: "dxDateBox",
                    editorOptions: {
                        value: load.ArivalTime,
                        format: "shortDateShortTime",
                        width: "100%",
                        type: "datetime",
                        onValueChanged: function (args) {
                            form.getEditor("IDStatus")
                                .option("value", 2);
                        },
                        readOnly: false
                    }
                }
                    ,
                {
                    label: {
                        text: "Dock On"
                    },
                    name: "DockOn",
                    dataField: "DockOn",
                    editorType: "dxDateBox",
                    editorOptions: {
                        value: load.DockOn,
                        format: "shortDateShortTime",
                        width: "100%",
                        type: "datetime",
                        readOnly: false
                    }
                }
                    ,
                {
                    label: {
                        text: "Dock Off"
                    },
                    name: "DockOff",
                    dataField: "DockOff",
                    editorType: "dxDateBox",
                    editorOptions: {
                        value: load.DockOff,
                        format: "shortDateShortTime",
                        width: "100%",
                        type: "datetime",
                        readOnly: false
                    }
                }
                    ,
                {
                    label: {
                        text: "Departure Time"
                    },
                    name: "DepartureTime",
                    dataField: "DepartureTime",
                    editorType: "dxDateBox",
                    editorOptions: {
                        value: load.DepartureTime,
                        format: "shortDateShortTime",
                        width: "100%",
                        type: "datetime",
                        onValueChanged: function (args) {
                            form.getEditor("IDStatus")
                                .option("value", 3);
                        },
                        readOnly: false
                    }
                }
                    ,
                {
                    label: {
                        text: "Deleted"
                    },
                    editorType: "dxSelectBox",
                    dataField: "Deleted",
                    editorOptions: {
                        items: deleted,
                        displayExpr: "text",
                        valueExpr: "value",
                        onValueChanged: function (args) {
                        }
                    }
                }

                ]);

                form.itemOption("IDLoadType", { validationRules: [{ type: "required", message: "Load type is required" }] });
                form.itemOption("PlannedTime", { validationRules: [{ type: "required", message: "Load type is required" }] });
                form.itemOption("IDCustomers", { validationRules: [{ type: "required", message: "Customer is required" }] });
                form.itemOption("IDDocks", { validationRules: [{ type: "required", message: "Dock is required" }] });
                form.itemOption("NumberOfPallets", { validationRules: [{ type: "required", message: "Number Of Pallets is required" }, { type: "numeric", message: "Format number is required" }] });
            }
        }).dxScheduler("instance");
    }


    function getLoadById(id) {
        console.log("GetLoadByID")
        return DevExpress.data.query(loadsData)
            .filter("LoadNumber", id)
            .toArray()[0];
    }

    function getCustomerById(id) {
        console.log("GetCustomerByID")
        return DevExpress.data.query(dropdownsData.Customers)
            .filter("Id", id)
            .toArray()[0];
    }
    
    function getMinutesBetweenDates(startDate, endDate) {
        var diff = new Date(endDate).getTime() - new Date(startDate).getTime();
        return (diff / 60000);
    }

    function addMinutes(date, minutes) {
        return new Date(date.getTime() + minutes * 60000);
    }

    function convertToTime(minutes) {
        var h = Math.floor(minutes / 60);
        var m = minutes % 60;
        h = h < 10 ? '0' + h : h;
        m = m < 10 ? '0' + m : m;
        return h + ':' + m;
    }
    
</script>
